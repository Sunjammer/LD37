// Generated by Haxe 3.4.0
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() {
	var _gthis = this;
	var outputField = window.document.getElementById("output");
	var runButton = window.document.getElementById("runButton");
	window.document.onclick = function(event) {
		var _g = 0;
		var _g1 = _gthis.machines;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.RAM[50] = event.x;
			m.RAM[51] = event.y;
			m.interrupt(1);
		}
	};
	runButton.onclick = function(event1) {
		_gthis.log = [];
		_gthis.buildAndRun();
	};
	var sourceField = window.document.getElementById("input");
	sourceField.innerHTML = sourceField.innerText = "SLI ;Sleep for IRQ1 (mouse click)\nIRQ1: TRC #50 ;mouseX\n  TRC #51 ;mouseY\n  RTI ;Back to sleep\n";
	this.log = [];
	outputField.innerHTML = "";
	haxe_Log.trace = function(d,pos) {
		_gthis.log.push(d);
		if(_gthis.log.length > 20) {
			_gthis.log.shift();
		}
		outputField.innerHTML = _gthis.log.join("<br/>");
	};
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.prototype = {
	buildAndRun: function() {
		var a = new vm_Machine("Alpha");
		var this1 = new Array(128);
		a.MEMCTRL[1] = this1;
		var _g1 = 0;
		var _g = a.MEMCTRL[1].length;
		while(_g1 < _g) {
			var i = _g1++;
			a.MEMCTRL[1][i] = i;
		}
		var sourceField = window.document.getElementById("input");
		try {
			a.load(vm_Assembler.assemble(sourceField.innerText));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			js_Browser.alert(Std.string(e) + "");
		}
		this.machines = [a];
		window.requestAnimationFrame($bind(this,this.update));
	}
	,update: function(time) {
		try {
			var clock = 16;
			while(clock-- > 0) {
				var _g = 0;
				var _g1 = this.machines;
				while(_g < _g1.length) {
					var m = _g1[_g];
					++_g;
					if(m.isRunning()) {
						m.next();
						if(!m.isRunning()) {
							haxe_Log.trace(m.name + " is complete",{ fileName : "Main.hx", lineNumber : 130, className : "Main", methodName : "update"});
						}
					}
				}
			}
			var _g2 = 0;
			var _g11 = this.machines;
			while(_g2 < _g11.length) {
				var m1 = _g11[_g2];
				++_g2;
				if(m1.isRunning()) {
					window.requestAnimationFrame($bind(this,this.update));
					return;
				}
			}
			haxe_Log.trace("All machines done",{ fileName : "Main.hx", lineNumber : 142, className : "Main", methodName : "update"});
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			js_Browser.alert(Std.string(e) + "");
		}
	}
	,__class__: Main
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
Type.__name__ = true;
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
haxe_ds__$Vector_Vector_$Impl_$.__name__ = true;
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			while(_g1 < len) {
				++_g1;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			while(_g11 < len) {
				++_g11;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		while(_g12 < len) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class?o.__name__ != null:false) {
			return true;
		}
		if(cl == Enum?o.__ename__ != null:false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var vm_Assembler = function() { };
vm_Assembler.__name__ = true;
vm_Assembler.assemble = function(source) {
	var rawlines = StringTools.trim(source).split("\n");
	var lines = [];
	var aliases = new haxe_ds_StringMap();
	var labels = new haxe_ds_StringMap();
	var interrupts = new haxe_ds_IntMap();
	var count = 0;
	var _g1 = 0;
	var _g = rawlines.length;
	while(_g1 < _g) {
		var str = rawlines[_g1++];
		var out = "";
		var _g11 = 0;
		var _g2 = str.length;
		while(_g11 < _g2) {
			var $char = str.charAt(_g11++);
			if($char == ";") {
				break;
			}
			out += $char;
		}
		var line = StringTools.trim(out);
		if(line.length == 0) {
			continue;
		}
		if(line.indexOf(":") > -1) {
			if(line.indexOf("IRQ") > -1) {
				var k = Std.parseInt(line.substring(3));
				interrupts.h[k] = count;
			} else {
				var k1 = HxOverrides.substr(line,0,line.length - 1);
				var v = count + "";
				if(__map_reserved[k1] != null) {
					labels.setReserved(k1,v);
				} else {
					labels.h[k1] = v;
				}
			}
			line = StringTools.trim(HxOverrides.substr(line,line.lastIndexOf(":") + 1,null));
		}
		if(line.indexOf("alias") > -1) {
			var components = line.split(" ");
			components.shift();
			var v1 = components[1];
			var key = components[0];
			if(__map_reserved[key] != null) {
				aliases.setReserved(key,v1);
			} else {
				aliases.h[key] = v1;
			}
			continue;
		}
		++count;
		lines.push(line);
	}
	var _g12 = 0;
	var _g3 = lines.length;
	while(_g12 < _g3) {
		var i = _g12++;
		var line1 = lines[i];
		var label = labels.keys();
		while(label.hasNext()) {
			var label1 = label.next();
			if(line1.indexOf(label1) > -1) {
				lines[i] = StringTools.replace(line1,label1,__map_reserved[label1] != null?labels.getReserved(label1):labels.h[label1]);
			}
		}
		var alias = aliases.keys();
		while(alias.hasNext()) {
			var alias1 = alias.next();
			if(line1.indexOf(alias1) > -1) {
				lines[i] = StringTools.replace(line1,alias1,__map_reserved[alias1] != null?aliases.getReserved(alias1):aliases.h[alias1]);
			}
		}
	}
	var length = lines.length;
	var out1 = { instructions : new Array(length), interrupts : interrupts};
	var _g13 = 0;
	var _g4 = lines.length;
	while(_g13 < _g4) {
		var i1 = _g13++;
		out1.instructions[i1] = vm_Assembler.parseLine(lines[i1],i1);
	}
	return out1;
};
vm_Assembler.parseLine = function(line,lineNo) {
	var tokens = line.split(" ");
	var operator = tokens.shift();
	try {
		var _g = [];
		var _g1 = 0;
		while(_g1 < tokens.length) {
			var t = tokens[_g1];
			++_g1;
			_g.push(vm_Assembler.toValue(t));
		}
		var i = Type.createEnum(vm_Instruction,operator,_g);
		if(i.slice(2).length != tokens.length) {
			throw new js__$Boot_HaxeError("Missing operand");
		}
		return i;
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		throw new js__$Boot_HaxeError("Syntax error " + operator + " at line " + lineNo + ": " + Std.string(e));
	}
};
vm_Assembler.toValue = function(str) {
	var v = str.toLowerCase();
	var _hx_tmp;
	var _hx_tmp1;
	_hx_tmp = v.charAt(0);
	if(_hx_tmp == "@") {
		return vm_Value.Relative(Std.parseInt(StringTools.trim(HxOverrides.substr(str,1,null))));
	} else if(_hx_tmp == "#") {
		if(str.indexOf("##") > -1) {
			return vm_Value.Location(Std.parseInt(StringTools.trim(HxOverrides.substr(str,2,null))),false);
		} else {
			return vm_Value.Location(Std.parseInt(StringTools.trim(HxOverrides.substr(str,1,null))),true);
		}
	} else if(_hx_tmp == "a") {
		return vm_Value.AReg;
	} else if(_hx_tmp == "x") {
		return vm_Value.XReg;
	} else if(_hx_tmp == "y") {
		return vm_Value.YReg;
	} else {
		_hx_tmp1 = Std.parseInt(v);
		if(_hx_tmp1 == null) {
			return str;
		} else {
			return vm_Value.Const(Std.parseInt(str));
		}
	}
};
var vm_Instruction = { __ename__ : true, __constructs__ : ["LDA","LDX","LDY","STA","STX","STY","WRM","PHA","PLA","TAX","TXA","TAY","TYA","TXY","TYX","SUB","ADD","SLI","SLP","BNE","BEQ","BLT","BGT","JMP","JSR","RTS","RTI","DMA","AND","IOR","XOR","LSH","RSH","BRK","NOP","TRC","MEM"] };
vm_Instruction.LDA = function(v) { var $x = ["LDA",0,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.LDX = function(v) { var $x = ["LDX",1,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.LDY = function(v) { var $x = ["LDY",2,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.STA = function(v) { var $x = ["STA",3,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.STX = function(v) { var $x = ["STX",4,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.STY = function(v) { var $x = ["STY",5,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.WRM = function(pos) { var $x = ["WRM",6,pos]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.PHA = ["PHA",7];
vm_Instruction.PHA.__enum__ = vm_Instruction;
vm_Instruction.PLA = ["PLA",8];
vm_Instruction.PLA.__enum__ = vm_Instruction;
vm_Instruction.TAX = ["TAX",9];
vm_Instruction.TAX.__enum__ = vm_Instruction;
vm_Instruction.TXA = ["TXA",10];
vm_Instruction.TXA.__enum__ = vm_Instruction;
vm_Instruction.TAY = ["TAY",11];
vm_Instruction.TAY.__enum__ = vm_Instruction;
vm_Instruction.TYA = ["TYA",12];
vm_Instruction.TYA.__enum__ = vm_Instruction;
vm_Instruction.TXY = ["TXY",13];
vm_Instruction.TXY.__enum__ = vm_Instruction;
vm_Instruction.TYX = ["TYX",14];
vm_Instruction.TYX.__enum__ = vm_Instruction;
vm_Instruction.SUB = function(v) { var $x = ["SUB",15,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.ADD = function(v) { var $x = ["ADD",16,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.SLI = ["SLI",17];
vm_Instruction.SLI.__enum__ = vm_Instruction;
vm_Instruction.SLP = function(v) { var $x = ["SLP",18,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.BNE = function(a,b,pos) { var $x = ["BNE",19,a,b,pos]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.BEQ = function(a,b,pos) { var $x = ["BEQ",20,a,b,pos]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.BLT = function(a,b,pos) { var $x = ["BLT",21,a,b,pos]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.BGT = function(a,b,pos) { var $x = ["BGT",22,a,b,pos]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.JMP = function(v) { var $x = ["JMP",23,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.JSR = function(v) { var $x = ["JSR",24,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.RTS = ["RTS",25];
vm_Instruction.RTS.__enum__ = vm_Instruction;
vm_Instruction.RTI = ["RTI",26];
vm_Instruction.RTI.__enum__ = vm_Instruction;
vm_Instruction.DMA = function(v) { var $x = ["DMA",27,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.AND = function(v) { var $x = ["AND",28,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.IOR = function(v) { var $x = ["IOR",29,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.XOR = function(v) { var $x = ["XOR",30,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.LSH = function(v) { var $x = ["LSH",31,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.RSH = function(v) { var $x = ["RSH",32,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.BRK = ["BRK",33];
vm_Instruction.BRK.__enum__ = vm_Instruction;
vm_Instruction.NOP = ["NOP",34];
vm_Instruction.NOP.__enum__ = vm_Instruction;
vm_Instruction.TRC = function(v) { var $x = ["TRC",35,v]; $x.__enum__ = vm_Instruction; return $x; };
vm_Instruction.MEM = function(a,b) { var $x = ["MEM",36,a,b]; $x.__enum__ = vm_Instruction; return $x; };
var vm_Machine = function(name) {
	this.name = name;
	this.RAM = new Array(128);
	this.MEMCTRL = [this.RAM];
	this.reset();
};
vm_Machine.__name__ = true;
vm_Machine.prototype = {
	get_ROM: function() {
		return this.MEMCTRL[1];
	}
	,set_ROM: function(vec) {
		return this.MEMCTRL[1] = vec;
	}
	,get_A: function() {
		return this.RAM[0];
	}
	,set_A: function(v) {
		return this.RAM[0] = v;
	}
	,get_X: function() {
		return this.RAM[1];
	}
	,set_X: function(v) {
		return this.RAM[1] = v;
	}
	,get_Y: function() {
		return this.RAM[2];
	}
	,set_Y: function(v) {
		return this.RAM[2] = v;
	}
	,get_pc: function() {
		return this.RAM[3];
	}
	,set_pc: function(v) {
		return this.RAM[3] = v;
	}
	,get_stack: function() {
		return this.RAM[4];
	}
	,set_stack: function(v) {
		return this.RAM[4] = v;
	}
	,writeMem: function(p,value) {
		return this.RAM[p] = value;
	}
	,readMem: function(p) {
		return this.RAM[p];
	}
	,load: function(prog) {
		this.program = prog;
	}
	,isRunning: function() {
		return this.RAM[3] != -1;
	}
	,getValue: function(v) {
		switch(v[1]) {
		case 0:
			return v[2];
		case 1:
			var l = v[2];
			this.workLoad += 1;
			if(v[3]) {
				return this.RAM[l];
			} else {
				return this.MEMCTRL[1][l];
			}
			break;
		case 2:
			return this.RAM[3] + (v[2] - 1);
		case 3:
			return this.RAM[0];
		case 4:
			return this.RAM[1];
		case 5:
			return this.RAM[2];
		}
	}
	,reset: function() {
		this.workLoad = 0;
		var _g = 0;
		while(_g < 128) this.RAM[_g++] = 0;
	}
	,printMem: function(a,b,hex) {
		if(hex == null) {
			hex = true;
		}
		if(b == null) {
			b = 128;
		}
		if(a == null) {
			a = 0;
		}
		haxe_Log.trace("Memory:",{ fileName : "Machine.hx", lineNumber : 116, className : "vm.Machine", methodName : "printMem"});
		var _g1 = a;
		while(_g1 < b) {
			var i = _g1++;
			var str = "\t" + i + "\t";
			str += hex?"0x" + StringTools.hex(this.RAM[i],2):this.RAM[i];
			haxe_Log.trace(str,{ fileName : "Machine.hx", lineNumber : 120, className : "vm.Machine", methodName : "printMem"});
		}
	}
	,pushStack: function(v) {
		if(112 + this.RAM[4] + 1 > 128) {
			throw new js__$Boot_HaxeError("Stack overflow");
		}
		this.workLoad++;
		this.RAM[112 + this.RAM[4]] = v;
		this.RAM[4] += 1;
	}
	,popStack: function() {
		this.workLoad++;
		if(this.RAM[4] == 0) {
			return 0;
		}
		var _g = this;
		var index = 112 + (_g.RAM[4] = _g.RAM[4] - 1);
		return this.RAM[index];
	}
	,step: function(instruction) {
		this.RAM[3] += 1;
		this.workLoad += 1;
		switch(instruction[1]) {
		case 0:
			var v = instruction[2];
			this.workLoad += 1;
			var v1;
			switch(v[1]) {
			case 0:
				v1 = v[2];
				break;
			case 1:
				var l = v[2];
				this.workLoad += 1;
				if(v[3]) {
					v1 = this.RAM[l];
				} else {
					v1 = this.MEMCTRL[1][l];
				}
				break;
			case 2:
				v1 = this.RAM[3] + (v[2] - 1);
				break;
			case 3:
				v1 = this.RAM[0];
				break;
			case 4:
				v1 = this.RAM[1];
				break;
			case 5:
				v1 = this.RAM[2];
				break;
			}
			this.RAM[0] = v1;
			break;
		case 1:
			var v2 = instruction[2];
			this.workLoad += 1;
			var v3;
			switch(v2[1]) {
			case 0:
				v3 = v2[2];
				break;
			case 1:
				var l1 = v2[2];
				this.workLoad += 1;
				if(v2[3]) {
					v3 = this.RAM[l1];
				} else {
					v3 = this.MEMCTRL[1][l1];
				}
				break;
			case 2:
				v3 = this.RAM[3] + (v2[2] - 1);
				break;
			case 3:
				v3 = this.RAM[0];
				break;
			case 4:
				v3 = this.RAM[1];
				break;
			case 5:
				v3 = this.RAM[2];
				break;
			}
			this.RAM[1] = v3;
			break;
		case 2:
			var v4 = instruction[2];
			this.workLoad += 1;
			var v5;
			switch(v4[1]) {
			case 0:
				v5 = v4[2];
				break;
			case 1:
				var l2 = v4[2];
				this.workLoad += 1;
				if(v4[3]) {
					v5 = this.RAM[l2];
				} else {
					v5 = this.MEMCTRL[1][l2];
				}
				break;
			case 2:
				v5 = this.RAM[3] + (v4[2] - 1);
				break;
			case 3:
				v5 = this.RAM[0];
				break;
			case 4:
				v5 = this.RAM[1];
				break;
			case 5:
				v5 = this.RAM[2];
				break;
			}
			this.RAM[2] = v5;
			break;
		case 3:
			var v6 = instruction[2];
			this.workLoad += 1;
			var p;
			switch(v6[1]) {
			case 0:
				p = v6[2];
				break;
			case 1:
				var l3 = v6[2];
				this.workLoad += 1;
				if(v6[3]) {
					p = this.RAM[l3];
				} else {
					p = this.MEMCTRL[1][l3];
				}
				break;
			case 2:
				p = this.RAM[3] + (v6[2] - 1);
				break;
			case 3:
				p = this.RAM[0];
				break;
			case 4:
				p = this.RAM[1];
				break;
			case 5:
				p = this.RAM[2];
				break;
			}
			this.RAM[p] = this.RAM[0];
			break;
		case 4:
			var v7 = instruction[2];
			this.workLoad += 1;
			var p1;
			switch(v7[1]) {
			case 0:
				p1 = v7[2];
				break;
			case 1:
				var l4 = v7[2];
				this.workLoad += 1;
				if(v7[3]) {
					p1 = this.RAM[l4];
				} else {
					p1 = this.MEMCTRL[1][l4];
				}
				break;
			case 2:
				p1 = this.RAM[3] + (v7[2] - 1);
				break;
			case 3:
				p1 = this.RAM[0];
				break;
			case 4:
				p1 = this.RAM[1];
				break;
			case 5:
				p1 = this.RAM[2];
				break;
			}
			this.RAM[p1] = this.RAM[1];
			break;
		case 5:
			var v8 = instruction[2];
			this.workLoad += 1;
			var p2;
			switch(v8[1]) {
			case 0:
				p2 = v8[2];
				break;
			case 1:
				var l5 = v8[2];
				this.workLoad += 1;
				if(v8[3]) {
					p2 = this.RAM[l5];
				} else {
					p2 = this.MEMCTRL[1][l5];
				}
				break;
			case 2:
				p2 = this.RAM[3] + (v8[2] - 1);
				break;
			case 3:
				p2 = this.RAM[0];
				break;
			case 4:
				p2 = this.RAM[1];
				break;
			case 5:
				p2 = this.RAM[2];
				break;
			}
			this.RAM[p2] = this.RAM[2];
			break;
		case 6:
			var pos = instruction[2];
			this.workLoad += 1;
			var p3;
			switch(pos[1]) {
			case 0:
				p3 = pos[2];
				break;
			case 1:
				var l6 = pos[2];
				this.workLoad += 1;
				if(pos[3]) {
					p3 = this.RAM[l6];
				} else {
					p3 = this.MEMCTRL[1][l6];
				}
				break;
			case 2:
				p3 = this.RAM[3] + (pos[2] - 1);
				break;
			case 3:
				p3 = this.RAM[0];
				break;
			case 4:
				p3 = this.RAM[1];
				break;
			case 5:
				p3 = this.RAM[2];
				break;
			}
			this.RAM[p3] = this.RAM[0];
			break;
		case 7:
			this.pushStack(this.RAM[0]);
			break;
		case 8:
			var v9 = this.popStack();
			this.RAM[0] = v9;
			break;
		case 9:
			this.RAM[1] = this.RAM[0];
			break;
		case 10:
			this.RAM[0] = this.RAM[1];
			break;
		case 11:
			this.RAM[2] = this.RAM[0];
			break;
		case 12:
			this.RAM[0] = this.RAM[2];
			break;
		case 13:
			this.RAM[2] = this.RAM[1];
			break;
		case 14:
			this.RAM[1] = this.RAM[2];
			break;
		case 15:
			var v10 = instruction[2];
			this.workLoad += 1;
			var _g = this;
			var v11 = _g.RAM[0];
			var v12;
			switch(v10[1]) {
			case 0:
				v12 = v10[2];
				break;
			case 1:
				var l7 = v10[2];
				this.workLoad += 1;
				if(v10[3]) {
					v12 = this.RAM[l7];
				} else {
					v12 = this.MEMCTRL[1][l7];
				}
				break;
			case 2:
				v12 = this.RAM[3] + (v10[2] - 1);
				break;
			case 3:
				v12 = this.RAM[0];
				break;
			case 4:
				v12 = this.RAM[1];
				break;
			case 5:
				v12 = this.RAM[2];
				break;
			}
			_g.RAM[0] = v11 - v12;
			break;
		case 16:
			var v13 = instruction[2];
			this.workLoad += 1;
			var _g1 = this;
			var v14 = _g1.RAM[0];
			var v15;
			switch(v13[1]) {
			case 0:
				v15 = v13[2];
				break;
			case 1:
				var l8 = v13[2];
				this.workLoad += 1;
				if(v13[3]) {
					v15 = this.RAM[l8];
				} else {
					v15 = this.MEMCTRL[1][l8];
				}
				break;
			case 2:
				v15 = this.RAM[3] + (v13[2] - 1);
				break;
			case 3:
				v15 = this.RAM[0];
				break;
			case 4:
				v15 = this.RAM[1];
				break;
			case 5:
				v15 = this.RAM[2];
				break;
			}
			_g1.RAM[0] = v14 + v15;
			break;
		case 17:
			this.RAM[3] -= 1;
			this.workLoad = -1;
			break;
		case 18:
			var v16 = instruction[2];
			var tmp = this;
			var tmp1 = tmp.workLoad;
			var tmp2;
			switch(v16[1]) {
			case 0:
				tmp2 = v16[2];
				break;
			case 1:
				var l9 = v16[2];
				this.workLoad += 1;
				if(v16[3]) {
					tmp2 = this.RAM[l9];
				} else {
					tmp2 = this.MEMCTRL[1][l9];
				}
				break;
			case 2:
				tmp2 = this.RAM[3] + (v16[2] - 1);
				break;
			case 3:
				tmp2 = this.RAM[0];
				break;
			case 4:
				tmp2 = this.RAM[1];
				break;
			case 5:
				tmp2 = this.RAM[2];
				break;
			}
			tmp.workLoad = tmp1 + tmp2;
			break;
		case 19:
			var pos1 = instruction[4];
			var b = instruction[3];
			var a = instruction[2];
			this.workLoad += 3;
			var tmp3;
			switch(a[1]) {
			case 0:
				tmp3 = a[2];
				break;
			case 1:
				var l10 = a[2];
				this.workLoad += 1;
				if(a[3]) {
					tmp3 = this.RAM[l10];
				} else {
					tmp3 = this.MEMCTRL[1][l10];
				}
				break;
			case 2:
				tmp3 = this.RAM[3] + (a[2] - 1);
				break;
			case 3:
				tmp3 = this.RAM[0];
				break;
			case 4:
				tmp3 = this.RAM[1];
				break;
			case 5:
				tmp3 = this.RAM[2];
				break;
			}
			var tmp4;
			switch(b[1]) {
			case 0:
				tmp4 = b[2];
				break;
			case 1:
				var l11 = b[2];
				this.workLoad += 1;
				if(b[3]) {
					tmp4 = this.RAM[l11];
				} else {
					tmp4 = this.MEMCTRL[1][l11];
				}
				break;
			case 2:
				tmp4 = this.RAM[3] + (b[2] - 1);
				break;
			case 3:
				tmp4 = this.RAM[0];
				break;
			case 4:
				tmp4 = this.RAM[1];
				break;
			case 5:
				tmp4 = this.RAM[2];
				break;
			}
			if(tmp3 != tmp4) {
				var v17;
				switch(pos1[1]) {
				case 0:
					v17 = pos1[2];
					break;
				case 1:
					var l12 = pos1[2];
					this.workLoad += 1;
					if(pos1[3]) {
						v17 = this.RAM[l12];
					} else {
						v17 = this.MEMCTRL[1][l12];
					}
					break;
				case 2:
					v17 = this.RAM[3] + (pos1[2] - 1);
					break;
				case 3:
					v17 = this.RAM[0];
					break;
				case 4:
					v17 = this.RAM[1];
					break;
				case 5:
					v17 = this.RAM[2];
					break;
				}
				this.RAM[3] = v17;
			}
			break;
		case 20:
			var pos2 = instruction[4];
			var b1 = instruction[3];
			var a1 = instruction[2];
			this.workLoad += 3;
			var tmp5;
			switch(a1[1]) {
			case 0:
				tmp5 = a1[2];
				break;
			case 1:
				var l13 = a1[2];
				this.workLoad += 1;
				if(a1[3]) {
					tmp5 = this.RAM[l13];
				} else {
					tmp5 = this.MEMCTRL[1][l13];
				}
				break;
			case 2:
				tmp5 = this.RAM[3] + (a1[2] - 1);
				break;
			case 3:
				tmp5 = this.RAM[0];
				break;
			case 4:
				tmp5 = this.RAM[1];
				break;
			case 5:
				tmp5 = this.RAM[2];
				break;
			}
			var tmp6;
			switch(b1[1]) {
			case 0:
				tmp6 = b1[2];
				break;
			case 1:
				var l14 = b1[2];
				this.workLoad += 1;
				if(b1[3]) {
					tmp6 = this.RAM[l14];
				} else {
					tmp6 = this.MEMCTRL[1][l14];
				}
				break;
			case 2:
				tmp6 = this.RAM[3] + (b1[2] - 1);
				break;
			case 3:
				tmp6 = this.RAM[0];
				break;
			case 4:
				tmp6 = this.RAM[1];
				break;
			case 5:
				tmp6 = this.RAM[2];
				break;
			}
			if(tmp5 == tmp6) {
				var v18;
				switch(pos2[1]) {
				case 0:
					v18 = pos2[2];
					break;
				case 1:
					var l15 = pos2[2];
					this.workLoad += 1;
					if(pos2[3]) {
						v18 = this.RAM[l15];
					} else {
						v18 = this.MEMCTRL[1][l15];
					}
					break;
				case 2:
					v18 = this.RAM[3] + (pos2[2] - 1);
					break;
				case 3:
					v18 = this.RAM[0];
					break;
				case 4:
					v18 = this.RAM[1];
					break;
				case 5:
					v18 = this.RAM[2];
					break;
				}
				this.RAM[3] = v18;
			}
			break;
		case 21:
			var pos3 = instruction[4];
			var b2 = instruction[3];
			var a2 = instruction[2];
			this.workLoad += 3;
			var tmp7;
			switch(a2[1]) {
			case 0:
				tmp7 = a2[2];
				break;
			case 1:
				var l16 = a2[2];
				this.workLoad += 1;
				if(a2[3]) {
					tmp7 = this.RAM[l16];
				} else {
					tmp7 = this.MEMCTRL[1][l16];
				}
				break;
			case 2:
				tmp7 = this.RAM[3] + (a2[2] - 1);
				break;
			case 3:
				tmp7 = this.RAM[0];
				break;
			case 4:
				tmp7 = this.RAM[1];
				break;
			case 5:
				tmp7 = this.RAM[2];
				break;
			}
			var tmp8;
			switch(b2[1]) {
			case 0:
				tmp8 = b2[2];
				break;
			case 1:
				var l17 = b2[2];
				this.workLoad += 1;
				if(b2[3]) {
					tmp8 = this.RAM[l17];
				} else {
					tmp8 = this.MEMCTRL[1][l17];
				}
				break;
			case 2:
				tmp8 = this.RAM[3] + (b2[2] - 1);
				break;
			case 3:
				tmp8 = this.RAM[0];
				break;
			case 4:
				tmp8 = this.RAM[1];
				break;
			case 5:
				tmp8 = this.RAM[2];
				break;
			}
			if(tmp7 < tmp8) {
				var v19;
				switch(pos3[1]) {
				case 0:
					v19 = pos3[2];
					break;
				case 1:
					var l18 = pos3[2];
					this.workLoad += 1;
					if(pos3[3]) {
						v19 = this.RAM[l18];
					} else {
						v19 = this.MEMCTRL[1][l18];
					}
					break;
				case 2:
					v19 = this.RAM[3] + (pos3[2] - 1);
					break;
				case 3:
					v19 = this.RAM[0];
					break;
				case 4:
					v19 = this.RAM[1];
					break;
				case 5:
					v19 = this.RAM[2];
					break;
				}
				this.RAM[3] = v19;
			}
			break;
		case 22:
			var pos4 = instruction[4];
			var b3 = instruction[3];
			var a3 = instruction[2];
			this.workLoad += 3;
			var tmp9;
			switch(a3[1]) {
			case 0:
				tmp9 = a3[2];
				break;
			case 1:
				var l19 = a3[2];
				this.workLoad += 1;
				if(a3[3]) {
					tmp9 = this.RAM[l19];
				} else {
					tmp9 = this.MEMCTRL[1][l19];
				}
				break;
			case 2:
				tmp9 = this.RAM[3] + (a3[2] - 1);
				break;
			case 3:
				tmp9 = this.RAM[0];
				break;
			case 4:
				tmp9 = this.RAM[1];
				break;
			case 5:
				tmp9 = this.RAM[2];
				break;
			}
			var tmp10;
			switch(b3[1]) {
			case 0:
				tmp10 = b3[2];
				break;
			case 1:
				var l20 = b3[2];
				this.workLoad += 1;
				if(b3[3]) {
					tmp10 = this.RAM[l20];
				} else {
					tmp10 = this.MEMCTRL[1][l20];
				}
				break;
			case 2:
				tmp10 = this.RAM[3] + (b3[2] - 1);
				break;
			case 3:
				tmp10 = this.RAM[0];
				break;
			case 4:
				tmp10 = this.RAM[1];
				break;
			case 5:
				tmp10 = this.RAM[2];
				break;
			}
			if(tmp9 > tmp10) {
				var v20;
				switch(pos4[1]) {
				case 0:
					v20 = pos4[2];
					break;
				case 1:
					var l21 = pos4[2];
					this.workLoad += 1;
					if(pos4[3]) {
						v20 = this.RAM[l21];
					} else {
						v20 = this.MEMCTRL[1][l21];
					}
					break;
				case 2:
					v20 = this.RAM[3] + (pos4[2] - 1);
					break;
				case 3:
					v20 = this.RAM[0];
					break;
				case 4:
					v20 = this.RAM[1];
					break;
				case 5:
					v20 = this.RAM[2];
					break;
				}
				this.RAM[3] = v20;
			}
			break;
		case 23:
			var v21 = instruction[2];
			this.workLoad += 1;
			var v22;
			switch(v21[1]) {
			case 0:
				v22 = v21[2];
				break;
			case 1:
				var l22 = v21[2];
				this.workLoad += 1;
				if(v21[3]) {
					v22 = this.RAM[l22];
				} else {
					v22 = this.MEMCTRL[1][l22];
				}
				break;
			case 2:
				v22 = this.RAM[3] + (v21[2] - 1);
				break;
			case 3:
				v22 = this.RAM[0];
				break;
			case 4:
				v22 = this.RAM[1];
				break;
			case 5:
				v22 = this.RAM[2];
				break;
			}
			this.RAM[3] = v22;
			break;
		case 24:
			var v23 = instruction[2];
			this.workLoad += 1;
			this.pushStack(this.RAM[3]);
			var v24;
			switch(v23[1]) {
			case 0:
				v24 = v23[2];
				break;
			case 1:
				var l23 = v23[2];
				this.workLoad += 1;
				if(v23[3]) {
					v24 = this.RAM[l23];
				} else {
					v24 = this.MEMCTRL[1][l23];
				}
				break;
			case 2:
				v24 = this.RAM[3] + (v23[2] - 1);
				break;
			case 3:
				v24 = this.RAM[0];
				break;
			case 4:
				v24 = this.RAM[1];
				break;
			case 5:
				v24 = this.RAM[2];
				break;
			}
			this.RAM[3] = v24;
			break;
		case 25:case 26:
			var v25 = this.popStack();
			this.RAM[3] = v25;
			break;
		case 27:
			var v26 = instruction[2];
			var tmp11;
			switch(v26[1]) {
			case 0:
				tmp11 = v26[2];
				break;
			case 1:
				var l24 = v26[2];
				this.workLoad += 1;
				if(v26[3]) {
					tmp11 = this.RAM[l24];
				} else {
					tmp11 = this.MEMCTRL[1][l24];
				}
				break;
			case 2:
				tmp11 = this.RAM[3] + (v26[2] - 1);
				break;
			case 3:
				tmp11 = this.RAM[0];
				break;
			case 4:
				tmp11 = this.RAM[1];
				break;
			case 5:
				tmp11 = this.RAM[2];
				break;
			}
			this.runDMA(tmp11);
			break;
		case 28:
			var a4 = instruction[2];
			this.workLoad += 1;
			var v27 = this.RAM[0];
			var v28;
			switch(a4[1]) {
			case 0:
				v28 = a4[2];
				break;
			case 1:
				var l25 = a4[2];
				this.workLoad += 1;
				if(a4[3]) {
					v28 = this.RAM[l25];
				} else {
					v28 = this.MEMCTRL[1][l25];
				}
				break;
			case 2:
				v28 = this.RAM[3] + (a4[2] - 1);
				break;
			case 3:
				v28 = this.RAM[0];
				break;
			case 4:
				v28 = this.RAM[1];
				break;
			case 5:
				v28 = this.RAM[2];
				break;
			}
			this.RAM[0] = v27 & v28;
			break;
		case 29:
			var a5 = instruction[2];
			this.workLoad += 1;
			var v29 = this.RAM[0];
			var v30;
			switch(a5[1]) {
			case 0:
				v30 = a5[2];
				break;
			case 1:
				var l26 = a5[2];
				this.workLoad += 1;
				if(a5[3]) {
					v30 = this.RAM[l26];
				} else {
					v30 = this.MEMCTRL[1][l26];
				}
				break;
			case 2:
				v30 = this.RAM[3] + (a5[2] - 1);
				break;
			case 3:
				v30 = this.RAM[0];
				break;
			case 4:
				v30 = this.RAM[1];
				break;
			case 5:
				v30 = this.RAM[2];
				break;
			}
			this.RAM[0] = v29 | v30;
			break;
		case 30:
			var a6 = instruction[2];
			this.workLoad += 1;
			var v31 = this.RAM[0];
			var v32;
			switch(a6[1]) {
			case 0:
				v32 = a6[2];
				break;
			case 1:
				var l27 = a6[2];
				this.workLoad += 1;
				if(a6[3]) {
					v32 = this.RAM[l27];
				} else {
					v32 = this.MEMCTRL[1][l27];
				}
				break;
			case 2:
				v32 = this.RAM[3] + (a6[2] - 1);
				break;
			case 3:
				v32 = this.RAM[0];
				break;
			case 4:
				v32 = this.RAM[1];
				break;
			case 5:
				v32 = this.RAM[2];
				break;
			}
			this.RAM[0] = v31 ^ v32;
			break;
		case 31:
			var a7 = instruction[2];
			this.workLoad += 1;
			var v33 = this.RAM[0];
			var v34;
			switch(a7[1]) {
			case 0:
				v34 = a7[2];
				break;
			case 1:
				var l28 = a7[2];
				this.workLoad += 1;
				if(a7[3]) {
					v34 = this.RAM[l28];
				} else {
					v34 = this.MEMCTRL[1][l28];
				}
				break;
			case 2:
				v34 = this.RAM[3] + (a7[2] - 1);
				break;
			case 3:
				v34 = this.RAM[0];
				break;
			case 4:
				v34 = this.RAM[1];
				break;
			case 5:
				v34 = this.RAM[2];
				break;
			}
			this.RAM[0] = v33 << v34;
			break;
		case 32:
			var a8 = instruction[2];
			this.workLoad += 1;
			var v35 = this.RAM[0];
			var v36;
			switch(a8[1]) {
			case 0:
				v36 = a8[2];
				break;
			case 1:
				var l29 = a8[2];
				this.workLoad += 1;
				if(a8[3]) {
					v36 = this.RAM[l29];
				} else {
					v36 = this.MEMCTRL[1][l29];
				}
				break;
			case 2:
				v36 = this.RAM[3] + (a8[2] - 1);
				break;
			case 3:
				v36 = this.RAM[0];
				break;
			case 4:
				v36 = this.RAM[1];
				break;
			case 5:
				v36 = this.RAM[2];
				break;
			}
			this.RAM[0] = v35 >> v36;
			break;
		case 33:
			this.RAM[3] = -1;
			break;
		case 34:
			this.workLoad += 1;
			break;
		case 35:
			var v37 = instruction[2];
			this.workLoad += 1;
			var tmp12 = this.name + ":\t";
			var tmp13;
			if(js_Boot.__instanceof(v37,vm_Value)) {
				var v38 = v37;
				switch(v38[1]) {
				case 0:
					tmp13 = v38[2];
					break;
				case 1:
					var l30 = v38[2];
					this.workLoad += 1;
					if(v38[3]) {
						tmp13 = this.RAM[l30];
					} else {
						tmp13 = this.MEMCTRL[1][l30];
					}
					break;
				case 2:
					tmp13 = this.RAM[3] + (v38[2] - 1);
					break;
				case 3:
					tmp13 = this.RAM[0];
					break;
				case 4:
					tmp13 = this.RAM[1];
					break;
				case 5:
					tmp13 = this.RAM[2];
					break;
				}
			} else {
				tmp13 = v37;
			}
			haxe_Log.trace(tmp12 + tmp13,{ fileName : "Machine.hx", lineNumber : 193, className : "vm.Machine", methodName : "step"});
			break;
		case 36:
			var b4 = instruction[3];
			var a9 = instruction[2];
			this.workLoad += 2;
			var tmp14;
			switch(a9[1]) {
			case 0:
				tmp14 = a9[2];
				break;
			case 1:
				var l31 = a9[2];
				this.workLoad += 1;
				if(a9[3]) {
					tmp14 = this.RAM[l31];
				} else {
					tmp14 = this.MEMCTRL[1][l31];
				}
				break;
			case 2:
				tmp14 = this.RAM[3] + (a9[2] - 1);
				break;
			case 3:
				tmp14 = this.RAM[0];
				break;
			case 4:
				tmp14 = this.RAM[1];
				break;
			case 5:
				tmp14 = this.RAM[2];
				break;
			}
			var tmp15;
			switch(b4[1]) {
			case 0:
				tmp15 = b4[2];
				break;
			case 1:
				var l32 = b4[2];
				this.workLoad += 1;
				if(b4[3]) {
					tmp15 = this.RAM[l32];
				} else {
					tmp15 = this.MEMCTRL[1][l32];
				}
				break;
			case 2:
				tmp15 = this.RAM[3] + (b4[2] - 1);
				break;
			case 3:
				tmp15 = this.RAM[0];
				break;
			case 4:
				tmp15 = this.RAM[1];
				break;
			case 5:
				tmp15 = this.RAM[2];
				break;
			}
			this.printMem(tmp14,tmp15);
			break;
		}
		return this.RAM[3];
	}
	,runDMA: function(configStart) {
		this.workLoad += 5;
		var config = this.RAM[configStart++];
		var p = configStart++;
		var p1 = configStart++;
		var from = config >> 4 & 255;
		var to = config & 15;
		if(from > this.MEMCTRL.length - 1) {
			throw new js__$Boot_HaxeError("Unknown or invalid dma source " + from);
		}
		if(to > this.MEMCTRL.length - 1) {
			throw new js__$Boot_HaxeError("Unknown or invalid dma source " + to);
		}
		haxe_ds__$Vector_Vector_$Impl_$.blit(this.MEMCTRL[from],this.RAM[p],this.MEMCTRL[to],this.RAM[configStart],this.RAM[p1]);
	}
	,next: function() {
		this.cycleCount++;
		if(this.workLoad == -1) {
			return;
		}
		if(this.workLoad > 0) {
			this.workLoad--;
			return;
		}
		var instruction = this.program.instructions[this.RAM[3]];
		if(instruction == null) {
			throw new js__$Boot_HaxeError("Program counter overflow: " + this.RAM[3] + "/" + this.program.instructions.length);
		}
		var v = this.step(instruction);
		this.RAM[3] = v;
	}
	,interrupt: function(irq) {
		if(!this.isRunning()) {
			return;
		}
		if(this.program.interrupts.h.hasOwnProperty(irq)) {
			this.workLoad = 0;
			this.pushStack(this.RAM[3]);
			this.RAM[3] = this.program.interrupts.h[irq];
		}
	}
	,run: function(program) {
		this.program = program;
		this.reset();
		try {
			while(this.isRunning()) this.next();
			haxe_Log.trace("Program completed",{ fileName : "Machine.hx", lineNumber : 288, className : "vm.Machine", methodName : "run"});
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace("Program crashed at " + this.RAM[3] + ": " + Std.string(e),{ fileName : "Machine.hx", lineNumber : 290, className : "vm.Machine", methodName : "run"});
		}
	}
	,__class__: vm_Machine
};
var vm_StringUtil = function() { };
vm_StringUtil.__name__ = true;
vm_StringUtil.readUntil = function(str,character) {
	var out = "";
	var _g1 = 0;
	var _g = str.length;
	while(_g1 < _g) {
		var $char = str.charAt(_g1++);
		if($char == character) {
			break;
		}
		out += $char;
	}
	return out;
};
vm_StringUtil.readFrom = function(str,character) {
	return HxOverrides.substr(str,str.lastIndexOf(character) + 1,null);
};
var vm_Value = { __ename__ : true, __constructs__ : ["Const","Location","Relative","AReg","XReg","YReg"] };
vm_Value.Const = function(v) { var $x = ["Const",0,v]; $x.__enum__ = vm_Value; return $x; };
vm_Value.Location = function(v,ram) { var $x = ["Location",1,v,ram]; $x.__enum__ = vm_Value; return $x; };
vm_Value.Relative = function(v) { var $x = ["Relative",2,v]; $x.__enum__ = vm_Value; return $x; };
vm_Value.AReg = ["AReg",3];
vm_Value.AReg.__enum__ = vm_Value;
vm_Value.XReg = ["XReg",4];
vm_Value.XReg.__enum__ = vm_Value;
vm_Value.YReg = ["YReg",5];
vm_Value.YReg.__enum__ = vm_Value;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
js_Boot.__toStr = ({ }).toString;
vm_Machine.MEMSIZE = 128;
vm_Machine.STACK_OFFSET = 112;
vm_Machine.CLOCK_RATE = 1000;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
